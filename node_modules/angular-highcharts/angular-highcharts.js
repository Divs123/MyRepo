import { chart } from 'highcharts';
import { Directive, ElementRef, Input, NgModule } from '@angular/core';

class Chart {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.options = options;
        // init series array if not set
        if (!this.options.series) {
            this.options.series = [];
        }
    }
    /**
     * @param {?} point
     * @param {?=} serieIndex
     * @param {?=} redraw
     * @param {?=} shift
     * @return {?}
     */
    addPoint(point, serieIndex = 0, redraw = true, shift = false) {
        ((this.options.series[serieIndex].data)).push(point);
        if (this.ref) {
            this.ref.series[serieIndex].addPoint(point, redraw, shift);
        }
    }
    /**
     * @param {?} pointIndex
     * @param {?=} serieIndex
     * @return {?}
     */
    removePoint(pointIndex, serieIndex = 0) {
        // TODO add try catch (empty)
        ((this.options.series[serieIndex].data)).splice(pointIndex, 1);
        if (this.ref) {
            this.ref.series[serieIndex].removePoint(pointIndex, true);
        }
    }
    /**
     * @param {?} serie
     * @return {?}
     */
    addSerie(serie) {
        // init data array if not set
        if (!serie.data) {
            serie.data = [];
        }
        this.options.series.push(serie);
        if (this.ref) {
            this.ref.addSeries(serie);
        }
    }
    /**
     * @param {?} serieIndex
     * @return {?}
     */
    removeSerie(serieIndex) {
        // TODO add try catch (empty)
        this.options.series.splice(serieIndex, 1);
        if (this.ref) {
            this.ref.series[serieIndex].remove(true);
        }
    }
}

class ChartDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!changes['chart'].isFirstChange()) {
            this.destroy();
            this.init();
        }
    }
    /**
     * @return {?}
     */
    init() {
        if (this.chart instanceof Chart) {
            this.chart.ref = chart(this.el.nativeElement, this.chart.options);
        }
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.chart && this.chart.ref) {
            this.chart.ref.destroy();
            delete this.chart.ref;
        }
    }
}
ChartDirective.decorators = [
    { type: Directive, args: [{
                selector: '[chart]'
            },] },
];
/**
 * @nocollapse
 */
ChartDirective.ctorParameters = () => [
    { type: ElementRef, },
];
ChartDirective.propDecorators = {
    'chart': [{ type: Input },],
};

class ChartModule {
}
ChartModule.decorators = [
    { type: NgModule, args: [{
                exports: [ChartDirective],
                declarations: [ChartDirective],
            },] },
];
/**
 * @nocollapse
 */
ChartModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { ChartModule, ChartDirective, Chart };
export { Highcharts } from 'highcharts';
