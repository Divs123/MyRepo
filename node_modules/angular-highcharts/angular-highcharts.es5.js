import { chart } from 'highcharts';
import { Directive, ElementRef, Input, NgModule } from '@angular/core';

var Chart = /** @class */ (function () {
    /**
     * @param {?} options
     */
    function Chart(options) {
        this.options = options;
        // init series array if not set
        if (!this.options.series) {
            this.options.series = [];
        }
    }
    /**
     * @param {?} point
     * @param {?=} serieIndex
     * @param {?=} redraw
     * @param {?=} shift
     * @return {?}
     */
    Chart.prototype.addPoint = function (point, serieIndex, redraw, shift) {
        if (serieIndex === void 0) { serieIndex = 0; }
        if (redraw === void 0) { redraw = true; }
        if (shift === void 0) { shift = false; }
        ((this.options.series[serieIndex].data)).push(point);
        if (this.ref) {
            this.ref.series[serieIndex].addPoint(point, redraw, shift);
        }
    };
    /**
     * @param {?} pointIndex
     * @param {?=} serieIndex
     * @return {?}
     */
    Chart.prototype.removePoint = function (pointIndex, serieIndex) {
        if (serieIndex === void 0) { serieIndex = 0; }
        // TODO add try catch (empty)
        ((this.options.series[serieIndex].data)).splice(pointIndex, 1);
        if (this.ref) {
            this.ref.series[serieIndex].removePoint(pointIndex, true);
        }
    };
    /**
     * @param {?} serie
     * @return {?}
     */
    Chart.prototype.addSerie = function (serie) {
        // init data array if not set
        if (!serie.data) {
            serie.data = [];
        }
        this.options.series.push(serie);
        if (this.ref) {
            this.ref.addSeries(serie);
        }
    };
    /**
     * @param {?} serieIndex
     * @return {?}
     */
    Chart.prototype.removeSerie = function (serieIndex) {
        // TODO add try catch (empty)
        this.options.series.splice(serieIndex, 1);
        if (this.ref) {
            this.ref.series[serieIndex].remove(true);
        }
    };
    return Chart;
}());

var ChartDirective = /** @class */ (function () {
    /**
     * @param {?} el
     */
    function ChartDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ChartDirective.prototype.ngAfterViewInit = function () {
        this.init();
    };
    /**
     * @return {?}
     */
    ChartDirective.prototype.ngOnDestroy = function () {
        this.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartDirective.prototype.ngOnChanges = function (changes) {
        if (!changes['chart'].isFirstChange()) {
            this.destroy();
            this.init();
        }
    };
    /**
     * @return {?}
     */
    ChartDirective.prototype.init = function () {
        if (this.chart instanceof Chart) {
            this.chart.ref = chart(this.el.nativeElement, this.chart.options);
        }
    };
    /**
     * @return {?}
     */
    ChartDirective.prototype.destroy = function () {
        if (this.chart && this.chart.ref) {
            this.chart.ref.destroy();
            delete this.chart.ref;
        }
    };
    ChartDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[chart]'
                },] },
    ];
    /**
     * @nocollapse
     */
    ChartDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    ChartDirective.propDecorators = {
        'chart': [{ type: Input },],
    };
    return ChartDirective;
}());

var ChartModule = /** @class */ (function () {
    function ChartModule() {
    }
    ChartModule.decorators = [
        { type: NgModule, args: [{
                    exports: [ChartDirective],
                    declarations: [ChartDirective],
                },] },
    ];
    /**
     * @nocollapse
     */
    ChartModule.ctorParameters = function () { return []; };
    return ChartModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { ChartModule, ChartDirective, Chart };
export { Highcharts } from 'highcharts';
